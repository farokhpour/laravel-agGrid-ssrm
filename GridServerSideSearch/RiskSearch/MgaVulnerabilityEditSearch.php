<?php
namespace App\Services\GridServerSideSearch\RiskSearch;


use App\Services\GridServerSideSearch\Search;

class MgaVulnerabilityEditSearch extends Search{


    public function applyFilters():Search{
        
        foreach($this->filters as $key => $filter){
            switch ($key) {
                case 'vulnerability_title':
                    $this->query->where('vulnerability_title',"like","%".$filter['filter']."%");
                    break;   
                case 'refrence_title':
                    $new_filter = $filter['filter'];
                    $this->query
                    ->whereHas('reference', function ($ch_query) use($new_filter){
                        $ch_query->where('title',"like","%".$new_filter."%");
                    });
                    break;  
                case 'refrence_weight':
                    $new_filter = $filter['values'];
                    $this->query
                    ->whereHas('reference', function ($ch_query) use($new_filter){
                        $ch_query->whereIn('weight',$new_filter);
                    });
                    break;  
                case 'mga_threats':
                    $new_filter = $filter['filter'];
                    $this->query
                    ->whereHas('reference', function ($ch_query) use($new_filter){
                        $ch_query->whereHas('mgaThreats',function ($th_query) use($new_filter){
                            $th_query->where('title',"like","%".$new_filter."%");
                        });
                    });
                    break;  
                case 'tags.process':
                    $new_filter = $filter['values'];
                    $this->query
                    ->whereHas('reference', function ($ch_query) use($new_filter){
                        $ch_query->whereHas('processTags', function ($pt_query) use($new_filter){
                            $pt_query->whereIn('title',$new_filter);
                        });
                    });
                    break;  
                case 'tags.asset':
                    $new_filter = $filter['values'];
                    $this->query
                    ->whereHas('reference', function ($ch_query) use($new_filter){
                        $ch_query->whereHas('assetTags', function ($pt_query) use($new_filter){
                            $pt_query->whereIn('title',$new_filter);
                        });
                    });
                    break;  
                case 'tags.section':
                    $new_filter = $filter['values'];
                    $this->query
                    ->whereHas('reference', function ($ch_query) use($new_filter){
                        $ch_query->whereHas('sectionTags', function ($pt_query) use($new_filter){
                            $pt_query->whereIn('title',$new_filter);
                        });
                    });
                    break;  
                case 'tags.other':
                    $new_filter = $filter['values'];
                    $this->query
                    ->whereHas('reference', function ($ch_query) use($new_filter){
                        $ch_query->whereHas('otherTags', function ($pt_query) use($new_filter){
                            $pt_query->whereIn('title',$new_filter);
                        });
                    });
                    break;  
                default:
                    $this->query->where('title',"like","%".$filter['filter']."%");
                    break;  
            }
        }
        return $this;
    }

    public function applySorts():Search{

        if(count($this->sorts)){

            $sortCol = ($this->sorts)[0]['colId'];
            $sortType = ($this->sorts)[0]['sort'];

            $this->query->orderBy($sortCol,$sortType);
        }
       

        return $this;
    
    }  

}